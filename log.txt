Log
Day 1 - 28th June

*** means research

a. Problem Two Sum - https://leetcode.com/problems/two-sum (needed less than O(n2))
 Attempt 1 - Tried bruteforce approach resulted in O(n2)
 Attempt 2 - HashMap resulted in O(n2) ***** 
		rechecking if it works
 Attempt 3 - First sort the array (nlogn) and after that search the target - current value by looping over the array (Onlogn) total 2O(nlogn)
	*** Learn to implement quick sort without Arrays.sort
	flow chart making 

Day 2 - 2nd July
a. Problem Palindrome number
	Needed to use some special cases in case if the given number length is only 2 or if the number is negative or in case where the number is even
 Attempt - 1 converted given number to a string and then an array of integers by using a private method and then after getting the array of number, created a loop to go through the array to find if it is palindrome

 Attempt - 2 converted given number to an array of integers by using modulus and division logic rather than strings 
	
 Learned char - '0' technique, modulus/division technique, then converting an array list of Integer to array of int using stream and maptoInt function, and toArray function

Day 3 - 4th July
a. Problem Roman to Int - https://leetcode.com/problems/roman-to-integer
	Attempt - 1 first thought of solving it using map, but as the solution seemed possible to implement without that, removed the map. Wrote a series of if statements and cases to satisfy each and every case. for example for IX or IL something used condition for I and then x and L conditions nested in it. Although the solution worked but because of so many conditions it looked messy and less readable.
	
Day 4 - 5th July - same roman to int solution with different approach
	Attempt - 2 followed NeetCode's approach and learned from the logic. Then implemented the solution in my own steps using Java. A simple, readable solution with good maintainability. 

Day 5 - 6th July https://leetcode.com/problems/longest-common-prefix/
	Attempt - 1 could not solve the problem by myself - so first attempt failed
	Then understood the solution on NeetCode through youtube, and then implemented it

	the logic for solving the problem starts with the assumption that we take the first string and then loop until its length
	inside that loop, we go through each string and then compare the ith character of that string with the ith character of
	the first string. if the characters are not equal, then we return resultant string otherwise we append the common character

Day 5 - July 6th https://leetcode.com/problems/valid-parentheses/
	Attempt - first implemented the logic but unsuccessful, so took a little hint to fix the mistake
	The solution is not that hard - we first create an empty stack which will contain the opening brackets

	Now, afterwards, we loop through each and every character of the string, and push the corresponding opening
	brackets onto the stack. then if we encounter closing bracket, we first check if the stack is empty. If it is,
	then false will be returned indicating invalid parentheses. Otherwise, we check if it is the correct closing
	bracket, if no return false, else pop the element from the stack and continue. At the end, if the stack is not
	empty still, then it is invalid as well. 

Day 6 - July 8th - https://leetcode.com/problems/merge-two-sorted-lists/
	Attempt - first tried to solve the logic by myself but could not get successful to solve it in the target time
	so therefore watched the algorithm for it on Neetcode, and then implemented it based on that logic but without
	seeing their code

Day 7 - July 9th - https://leetcode.com/problems/remove-duplicates-from-sorted-array/

	Attempt - 1  - succeded but better than only 5% of the user that submitted the solution
	We created a map first to maintain the count of each and every element in the array
	Then we filled the map by looping through the array. Afterwards, we knew that the size of the map
	will be the k to be returned as no of unique elements. But we also needed to change the nums array 
	in place. For that we created a for loop and used two pointers i and j. The value of i will change
	depending upon the count of that current nums[i] in the map and the j will just be incremented by 1.
	We replace the value at nums j with the value nums i. However, the algorithm was just faster than 5% of
	the users.

	Attempt - 2 - our assumption that we needed a hashmap to solve this problem proved wrong. the array was 
	sorted. We just had to compare current element with the previous element. If the elements are not equal,
	then replace the element at next unique index of the arrya with the value at the current ith index and
	after that increment the unique index. 80% faster than users 

	potential problems - It involves lots of visualization which is not intuitive (normal to think). This can be
	done in second attempt. It's hard to do in the first attempt. even if you do it in first attempt, there are case
	like 0 or i - 1 where the code can fail. if our brain does not think fast enough we will miss the soln. NEVER
	EVER RUSH TO OPTMIZE THE SOLN. Check if the code is running. If it is, then OPTMIZE.

	Although using a map was more readable for the first attempt compared to the second attempt we made, we can also make the second attempt more readable by introducing some variables. For example, 'current' can represent nums[i] and 'prev' can represent nums[i - 1]. - this much log length expected

Day 8 - July 11th - https://leetcode.com/problems/remove-element/

	Attempt - 1 - This problem is almost the same as the above remove duplicates problem. The only difference is that
	here we are required to remove a single value in place. To start with, we don't go with our instinct of using hashmap
	as we know now that problems of this kind can be solved without it. Therefore, we will have a unique index variable
	at which we will store the element that are not equal to val. We loop through the array and check if the value at 
	current index is not equal to val. If it is not, then we store that value at unique index and increment the ui to move
	to the next index. We continue until all the elements are replaced, and then at the end return the unique index as the k - no of elements not equal to val. 

Day 9 - July 12th - https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/

	Attempt - 1 Needed to think for more than 15 minutes to find a possible solution and taking that much time is not good. The solution was not succesful either because of one logical mistakes. We started with the idea that we will have a start index and an end index. Start index will start with 0, and end index will start with startindex plus needle's length. The approach was good, and as we go through the loop, we were incrementing start index and the end index accordingly by adding needle's length into them, but this resulted in skipping of some in between elements. So, to resolve that part, we only incremented the end index part and stored that value in end index, but this also could not properly solve the question. Basically, we were incrementing the start index each and every time and comparing that chracter with the needle's chracter, but the problem was related to the end index now. As we were maintaining the end index, it skipped some characters in between as well. This solution was close to the right one, but because it was taking
	lots of time and as I was getting late, I looked over the discussion section to see where I am wrong.

	Attempt - 2 After reviewing the discussion part, I understood that there was a minor logical mistake that I made. All in all, the solution is that we don't need to have a separate endindex variable to solve it, we can just increment the loop index as we would normally do and substring the i and i + needle'slength part, to compare it with the needle. Then i gets incremented if it is not equal to go to next index. It was that simple. In this scenario, there was one special cast. If the i + needle length is more than haystack length, then we break because we know that it is going out of index now.

Had to take a pause because of other project/commitment

Day 10 - July 13th - https://leetcode.com/problems/search-insert-position/

	Attempt - 1 Binary Search solution with little modification
	The solution for this problem was easy if one is aware of how binary search works. We will need to maintain high and low indexes and find a mid index by looping through until the low index <= high index. If the give target exists in the given array, then the algorithm will return the mid index automatically, however if the target does not exist rather than returning the -1 in this case, we will return the left or low pointer indicating the index at which the target can be inserted.

Day 11 - July 14th - https://leetcode.com/problems/length-of-last-word/

	Attepmt - 1 This problem was focused on finding the length of the last word in the given string but ignoring the trailing spaces. The solution was simple. First of all we create a loop with the pointer i starting from the last index of the array, and going down until it reaches 0; The inside the loop, we first check if the current character is not equal to space. If it is not, then we increment a counter length variable that we declared outside the loop. Now, this continues until we encounter a space. If there is a space, then the second else if condition gets executed which checks if the length variable is greater than 0. If true, then it breaks the loop and return the length variable. The logic of using else if length > 0 condition is that we only break the loop if we have encountered any character than space in the given string from behind. 

Day 12 - July 15th - https://leetcode.com/problems/sort-the-people/

	Attempt - 1 Used hashmap and quick sort to solve the problem as the instinct solution is to connect both the given heights and names array once, which can be easily done through the map. The idea was to sort the height array first in descending order and then using the map to sort the names array by heights array.

	Attempt - 2 Sorted the names array in place without using the map. Need to modify the params passed to quicksort and parition methods to handle the logic for ordering names elements in descending order.

	Learnings:
	Refreshed on quick sort algo, and learned how to reverse an array in place
	n is the array's length

	for(int i = 0; i < n / 2; ++i) {
		int swap = arr[i];
		arr[i] = arr[n - 1 - i];
		arr[n - 1 - i] = swap;
	}

Day 13 - July 16th - https://leetcode.com/problems/add-binary/

	Attempt - 1 (unsuccessful) Converted the given binary strings to integer using custom method and then added those two integers. After that, converted the resultant integer back to binary string using a custom method. There was one more problem with this solution. It couldn't handle larger values that exceeded the maximum value for java integers, and this resulted in overflow.

	Attempt - 2 Used Java's in built type BigInteger to handle working with larger int values.

	Solution learned 3:

	class Solution {
		public String addBinary(String a, String b) 
		{
			StringBuilder sb = new StringBuilder();
			int carry = 0;
			int i = a.length() - 1;
			int j = b.length() - 1;

			while (i >= 0 || j >= 0 || carry == 1) {
				if(i >= 0)
					carry += a.charAt(i--) - '0';
				if(j >= 0)
					carry += b.charAt(j--) - '0';
				sb.append(carry % 2);
				carry /= 2;
			}
			return sb.reverse().toString();
		}
	}


Day 14 - July 18th - https://leetcode.com/problems/climbing-stairs/ (interesting problem)

Attempt - 1 unsuccessful (could not think that it is fibonacci series for the first time)

Went to discussion part, and realized that it is indeed based on that series and can be solved using recursion, iteration or other DP techs. 

Attemp - 2 Understood the recursive solution and its working. Implemented the solution by myself. Afterwards, went on to learning memoization technique using hashmap and udpated the solution accordingly.